{"version":3,"sources":["index.js","www/logos.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","www/App.js","www/serviceWorker.js","www/index.js"],"names":["module","exports","require","__webpack_require__","p","Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","_super","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","results","_this$state","searchFilterMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_www_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHAKAA,EAAOC,QAAUC,EAAQ,2CCLzBF,EAAAC,QAAiBE,EAAAC,EAAuB,uNCG3BC,2BAAO,SAACC,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BAAoEC,IAAI,YAChFR,EAAAC,EAAAC,cAAA,UAAMH,EAAMO,QAAQG,MACpBT,EAAAC,EAAAC,cAAA,SAAKH,EAAMO,QAAQI,UCFVC,EAAW,SAACZ,GACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMa,SAASC,IAAI,SAACP,GAAD,OAClBN,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,QCN3BU,SAAY,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,YAAaC,EAAkBF,EAAlBE,aACpC,OACInB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASiB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoCrEG,oDAlCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAI,EAAAC,KAAAF,OAYFP,aAAe,SAACU,GACdN,EAAKO,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtCV,EAAKW,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IALHR,uDAQd,WAAoB,IAAAY,EAAAT,KAClBU,MAAM,8CACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAaL,EAAKL,SAAS,CAAElB,SAAU4B,4BAKjD,WACE,IAAAC,EAAkCf,KAAKQ,MAA/BtB,EAAR6B,EAAQ7B,SAAUmB,EAAlBU,EAAkBV,YACZW,EAAuB9B,EAAS+B,OAAO,SAACrC,GAAD,OAC3CA,EAAQG,KAAKmC,cAAcC,SAASd,EAAYa,iBAElD,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACE5B,YAAY,2BACZC,aAAcO,KAAKP,eAErBnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUnC,SAAU8B,YA7BVM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.e62dbb50.chunk.js","sourcesContent":["// \"Create React App\" tooling expects to find the WWW root here,\n// so we simply use this file to import the ./www directory.\n//\n// For the backend, we set the container's entrypoint to src/api/index.js\n\nmodule.exports = require('./www')\n","module.exports = __webpack_public_path__ + \"static/media/logos.a9b0546c.svg\";","import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n  <div className='card-container'>\r\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=380x380`} alt='Monster' />\r\n    <h1>{ props.monster.name }</h1>\r\n    <p>{ props.monster.email }</p>\r\n  </div>\r\n);","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\n\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};","import React from \"react\"\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n    )\r\n}","import React from \"react\";\nimport logos from \"./logos.svg\";\nimport \"./App.css\";\nimport { CardList } from \"../components/card-list/card-list.component.jsx\";\nimport { SearchBox } from \"../components/search-box/search-box.component.jsx\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((results) => this.setState({ monsters: results }));\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const searchFilterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search your item here...\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={searchFilterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}